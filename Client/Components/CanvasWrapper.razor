@inject IJSRuntime JsRuntime
<h3>CanvasWrapper</h3>
<button @onclick=@AddText>Add text</button>
<div id="container" @ref="_div" style="width: 500px; height: 500px; background: lightgrey">

</div>
<div>
    <ImageUpload OnFileAdded=@DrawImage />
    <br/>
    @foreach (var item in _texts)
    {
        <input id=@item.Key type="text" value=@item.Value @onchange="@(args => UpdateText(args, item.Key))"/>
    }
</div>

@code {
    ElementReference _div;
    DotNetObjectReference<CanvasWrapper> _dotNetReference;
    Dictionary<Guid, string> _texts = new Dictionary<Guid, string>
    {
        {Guid.NewGuid(), "one"},
        {Guid.NewGuid(), "two"}
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _dotNetReference = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("konvawrap.init", _div, _dotNetReference);
        }
    }

    private async Task Alert(string value)
    {
        await JsRuntime.InvokeVoidAsync("alert", value);
    }

    private async Task AddText()
    {
        var id = Guid.NewGuid();
        var text = "zero";
        _texts.Add(id, text);
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("konvawrap.addText", id, text);
    }

    private async Task UpdateText(ChangeEventArgs args, Guid id)
    {
        await JsRuntime.InvokeVoidAsync("konvawrap.updateText", id, args.Value);
    }

    private async Task DrawImage(string image)
    {
        await JsRuntime.InvokeVoidAsync("konvawrap.drawImage", image);
    }
}

@page "/upload"

@using System.IO;
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Runtime.CompilerServices
@using System.Text
@using System.Threading
@using Tewr.Blazor.FileReader
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using SampleBlazorApp.Client.Components

@inject IFileReaderService fileReader
@inject HttpClient client

@inject NavigationManager NavigationManager

@attribute [Authorize]

<div class="card m-3">
    <div class="card-header">
        Upload file via "browse" button
    </div>
    <div class="col-4">
        <br />
        <div class="form-group">
            <input type="file" @ref="inputReference" @onchange="OpenFileAsync" />
            <ul>
                <li>File Name: @fileName</li>
                <li>Size: @size</li>
                <li>Type: @type</li>
            </ul>
        </div>

        <h3>Uploaded image:</h3>
        <br />
        <div class="col-4">
            @if (imagePath != null)
            {
                <img style="width: 500px" src="@imagePath" />
            }
        </div>

        <h3>Upload file to server</h3>

        <button type="button" disabled="@String.IsNullOrEmpty(imagePath)" class="btn btn-block btn-success" @onclick="UploadFileAsync">Upload File</button>

        @if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="alert alert-success">
                File has been uploaded
            </div>
        }
    </div>
</div>
<div class="card m-3">
    <div class="card-header">
        Upload image via drag'n'drop area
    </div>
    <div class="m-3">
        <DragDropImage />
    </div>
</div>

@code
{
    ElementReference inputReference;
    string message = String.Empty;
    string imagePath = null;
    string imageBase64 = null;

    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;

    Stream fileStream = null;

    async Task OpenFileAsync()
    {
        //Read the files
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
            return;

        //Get the info of the file
        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(ms.ToArray());
            imageBase64 = Convert.ToBase64String(ms.ToArray());
            imagePath = $"data:image/{type};base64, {imageBase64}";
        }
    }

    async Task UploadFileAsync()
    {
        string url = new Uri(NavigationManager.BaseUri).ToString();

        var content = new StringContent(JsonSerializer.Serialize(new { Image = imageBase64, Type = type }), Encoding.UTF8, "application/json");

        var response = await client.PostAsync($"{url}api/images", content);

        if (response.IsSuccessStatusCode)
        {
            message = "File has been uploaded successfully!";
        }
    }
}

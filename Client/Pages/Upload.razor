@page "/upload"

@using System.IO;
@using System.Net.Http.Headers
@using System.Runtime.CompilerServices
@using System.Threading
@using Tewr.Blazor.FileReader

@inject IFileReaderService fileReader
@inject HttpClient client

@inject NavigationManager NavigationManager

<h1>Upload file!</h1>

<div class="row">
    <div class="col-4">
        <div class="form-group">
            <input type="file" @ref="inputReference" @onchange="OpenFileAsync" />
            <ul>
                <li>File Name: @fileName</li>
                <li>Size: @size</li>
                <li>Type: @type</li>
            </ul>
        </div>

        <button type="button" disabled="@disabledButton" class="btn btn-block btn-success" @onclick="UploadFileAsync">Upload File</button>

        @if (!string.IsNullOrWhiteSpace(message))
        {
            <div class="alert alert-success">
                File has been uploaded
            </div>
        }
    </div>
    <div class="col-4">
        @if (imagePath != null)
        {
            <img style="width:150px" src="@imagePath"/>
        }
    </div>
</div>

@code
{
    ElementReference inputReference;
    string message = String.Empty;
    string imagePath = null;

    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;

    Stream fileStream = null;

    bool disabledButton = true;


    async Task OpenFileAsync()
    {
        //Read the files
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
            return;

        //Get the info of the file
        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(ms.ToArray());
            imagePath = $"data:image/{type};base64, {Convert.ToBase64String(ms.ToArray())}";
            disabledButton = false;
        }
    }

    async Task UploadFileAsync()
    {
        //Create the content
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");

        content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);

        string url = new Uri(NavigationManager.BaseUri).ToString();

        var response = await client.PostAsync($"{url}/api/images", content);

        if (response.IsSuccessStatusCode)
        {
            message = "File has been uploaded successfully!";
        }
    }
}
